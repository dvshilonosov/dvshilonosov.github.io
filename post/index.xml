<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | dvshilonosov</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Writing technical content in Markdown</title>
      <link>https://example.com/post/markdown/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/markdown/</guid>
      <description>&lt;h2 id=&#34;preliminaries&#34;&gt;Preliminaries&lt;/h2&gt;
&lt;h3 id=&#34;markdown-basics&#34;&gt;Markdown basics&lt;/h3&gt;
&lt;p&gt;To create a title, use the sign ( # ), for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;this-is-heading-1&#34;&gt;This is heading 1&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;this-is-heading-2&#34;&gt;This is heading 2&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;this-is-heading-3&#34;&gt;This is heading 3&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;this-is-heading-4&#34;&gt;This is heading 4&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make text bold, enclose it in double asterisks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This text is &lt;strong&gt;bold&lt;/strong&gt;.
To make text italic, enclose it in single asterisks:&lt;/li&gt;
&lt;li&gt;This text is &lt;em&gt;italic&lt;/em&gt;.
To make text bold and italic, enclose it in triple
asterisks:&lt;/li&gt;
&lt;li&gt;This is text is both &lt;em&gt;&lt;strong&gt;bold and italic&lt;/strong&gt;&lt;/em&gt;.
Quote blocks are created using the &amp;gt; symbol:&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The drought had lasted now for ten million years, and the reign of
the terrible lizards had long since ended. Here on the Equator, in
the continent which would one day be known as Africa, the battle
for existence had reached a new climax of ferocity, and the victor
was not yet in sight. In this barren and desiccated land, only the
small or the swift or the fierce could flourish, or even hope to
survive.
↪
↪
↪
↪
↪
↪
An unordered (bulleted) list can be formatted with an asterisk.
daughter or dash:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;List item 1&lt;/li&gt;
&lt;li&gt;List item 2&lt;/li&gt;
&lt;li&gt;List item 3&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Command processors (shells)</title>
      <link>https://example.com/post/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/shell/</guid>
      <description>&lt;h1 id=&#34;theoretical-introduction&#34;&gt;Theoretical introduction&lt;/h1&gt;
&lt;p&gt;A command processor (command shell, shell command interpreter) is a program that allows the user to interact with the computer&amp;rsquo;s operating system. On UNIX/Linux operating systems, the following shell implementations are most commonly used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bourne shell (sh) is a standard UNIX/Linux command shell containing a basic but complete set of functions;&lt;/li&gt;
&lt;li&gt;C-shell (or csh) - an add-on to the Bourne shell that uses a C-like command syntax with the ability to save the history of command execution;&lt;/li&gt;
&lt;li&gt;the Korn shell (or ksh) - resembles the C shell, but the program control statements are compatible with the Bourne shell statements;&lt;/li&gt;
&lt;li&gt;BASH - short for Bourne Again Shell (Bourne shell again), basically combines the properties of C and Korn shells (developed by the Free Software Foundation).
POSIX (Portable Operating System Interface for Computer Environments) is a set of standards for describing the interfaces between the operating system and application programs. The POSIX standards were developed by the IEEE (Institute of Electrical and Electronics Engineers) to ensure compatibility between different UNIX/Linux-like operating systems and portability of application programs at the source code level. POSIX-compliant shells are based on the Korn shell.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Scientific programming languages</title>
      <link>https://example.com/post/spl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/spl/</guid>
      <description>&lt;h1 id=&#34;theoretical-introduction&#34;&gt;Theoretical introduction&lt;/h1&gt;
&lt;p&gt;Scientific programming languages are programming languages specially designed to solve problems in scientific fields such as mathematics, physics, chemistry, biology, and others.&lt;/p&gt;
&lt;p&gt;One of the most common scientific programming languages is MATLAB, which is used for numerical calculations, data processing, and visualization of results. MATLAB has a rich library of functions and tools that allow you to solve various problems in the field of scientific research.&lt;/p&gt;
&lt;p&gt;Another famous programming language for scientific purposes is R. It is used for statistical data analysis and machine learning. R has a powerful library of packages that allow researchers to perform various analyzes and create graphs.&lt;/p&gt;
&lt;p&gt;Python has also become a popular programming language in scientific fields due to its simplicity and flexibility. It is widely used for scientific computing, image processing and data analysis.&lt;/p&gt;
&lt;p&gt;Each of these programming languages has its advantages and disadvantages, and the choice of language depends on the specific task and needs of the researcher. However, they all provide tools for solving complex problems in scientific fields and continue to evolve and improve over time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim editor</title>
      <link>https://example.com/post/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/vim/</guid>
      <description>&lt;h1 id=&#34;theoretical-introduction&#34;&gt;Theoretical introduction&lt;/h1&gt;
&lt;h2 id=&#34;instructions-for-work&#34;&gt;Instructions for work&lt;/h2&gt;
&lt;p&gt;Most Linux distributions install vi (Visual display editor) as the default text editor.
The vi editor has three modes of operation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command mode - designed to enter commands for editing and navigating through the file being edited;&lt;/li&gt;
&lt;li&gt;insert mode - designed to enter the content of the edited file;&lt;/li&gt;
&lt;li&gt;last (or command) line mode - used to write changes to a file and exit the editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To call the vi editor, you must specify the vi command and the name of the file being edited: vi &amp;lt;file_name&amp;gt;
In this case, if there is no file with the specified name, such a file will be created.
Switching to command mode is done by pressing the Esc key. To exit the vi editor, you need to switch to the last line mode: while in command mode, press Shift-; (essentially the character : is a colon), then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type wq characters if you want to write changes to the file before exiting the editor;&lt;/li&gt;
&lt;li&gt;type q (or q!) if you want to exit the editor without saving.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Comment&lt;/strong&gt;. Remember that vi distinguishes between uppercase and lowercase letters when typing (perceiving) commands.&lt;/p&gt;
&lt;h2 id=&#34;main-groups-of-editor-commands&#34;&gt;Main groups of editor commands&lt;/h2&gt;
&lt;h3 id=&#34;position-commands&#34;&gt;Position commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;0 (zero) - go to the beginning of the line;&lt;/li&gt;
&lt;li&gt;$ - go to the end of the line;&lt;/li&gt;
&lt;li&gt;G - go to the end of the file;&lt;/li&gt;
&lt;li&gt;n G — go to the line with number n.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;file-navigation-commands&#34;&gt;File navigation commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl-d - go half a screen forward;&lt;/li&gt;
&lt;li&gt;Ctrl-u - go half a screen back;&lt;/li&gt;
&lt;li&gt;Ctrl-f - go to the page forward;&lt;/li&gt;
&lt;li&gt;Ctrl-b - go back a page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;word-movement-commands1&#34;&gt;Word movement commands1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;W or w - go one word forward;&lt;/li&gt;
&lt;li&gt;n W or n w — go forward n words;&lt;/li&gt;
&lt;li&gt;b or B - go back a word;&lt;/li&gt;
&lt;li&gt;n b or n B - go back n words.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;edit-commands&#34;&gt;Edit commands&lt;/h2&gt;
&lt;h3 id=&#34;insert-text&#34;&gt;Insert text&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a - insert text after the cursor;&lt;/li&gt;
&lt;li&gt;A - insert text at the end of the line;&lt;/li&gt;
&lt;li&gt;i - insert text before the cursor;&lt;/li&gt;
&lt;li&gt;n i - insert text n times;&lt;/li&gt;
&lt;li&gt;I - insert text at the beginning of the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;insert-a-line&#34;&gt;Insert a line&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;o - insert a line under the cursor;&lt;/li&gt;
&lt;li&gt;O - insert a line above the cursor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;delete-text&#34;&gt;Delete text&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;x - delete one character in the buffer;&lt;/li&gt;
&lt;li&gt;d w - delete one word in the buffer;&lt;/li&gt;
&lt;li&gt;d $ - delete text from the cursor to the end of the line into the buffer;&lt;/li&gt;
&lt;li&gt;d 0 - delete text from the beginning of the line to the cursor position into the buffer;&lt;/li&gt;
&lt;li&gt;d d - delete one line into the buffer;&lt;/li&gt;
&lt;li&gt;n d d — delete n lines into the buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cancel-and-redo-changes-made&#34;&gt;Cancel and redo changes made&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;u - undo the last change;&lt;/li&gt;
&lt;li&gt;. - redo last change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;copy-text-to-clipboard&#34;&gt;Copy text to clipboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Y - copy the string to the clipboard;&lt;/li&gt;
&lt;li&gt;n Y — copy n lines to the buffer;&lt;/li&gt;
&lt;li&gt;y w - copy the word to the clipboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;paste-text-from-clipboard&#34;&gt;Paste text from clipboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;p - paste text from the buffer after the cursor;&lt;/li&gt;
&lt;li&gt;P - paste text from the buffer before the cursor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;replace-text&#34;&gt;Replace text&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;c w - replace the word;&lt;/li&gt;
&lt;li&gt;n c w - replace n words;&lt;/li&gt;
&lt;li&gt;c $ - replace the text from the cursor to the end of the line;&lt;/li&gt;
&lt;li&gt;r - replace the word;&lt;/li&gt;
&lt;li&gt;R - replace text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;search-text&#34;&gt;Search text&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;/ text - search forward in the text of the specified string of characters text;&lt;/li&gt;
&lt;li&gt;? text - search backwards through the text of the specified character string text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;edit-commands-in-command-line-mode&#34;&gt;Edit commands in command line mode&lt;/h2&gt;
&lt;h3 id=&#34;copy-and-move-text&#34;&gt;Copy and move text&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;: n,m d — delete lines from n to m;&lt;/li&gt;
&lt;li&gt;: i,j m k — move rows i through j, starting from row k;&lt;/li&gt;
&lt;li&gt;: i,j t k — copy lines from i to j into line k;&lt;/li&gt;
&lt;li&gt;: i,j w filename - write lines i through j to a file named filename.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;write-to-file-and-exit-editor&#34;&gt;Write to file and exit editor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;: w - write the changed text to a file without leaving vi;&lt;/li&gt;
&lt;li&gt;: w filename - write the changed text to a new file named filename;&lt;/li&gt;
&lt;li&gt;:w! filename - write the changed text to a file named filename;&lt;/li&gt;
&lt;li&gt;: w q - write changes to file and exit vi;&lt;/li&gt;
&lt;li&gt;: q - exit the vi editor;&lt;/li&gt;
&lt;li&gt;: q ! — exit the editor without writing;&lt;/li&gt;
&lt;li&gt;:e! - return to command mode, canceling all changes made
since the last entry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;
&lt;p&gt;The vi editor options allow you to customize your working environment. To set options, use the set command (in last line mode):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;:&amp;gt; set all - display the full list of options;&lt;/li&gt;
&lt;li&gt;&amp;lt;:&amp;gt; set nu - display line numbers;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; set list - display invisible characters;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;:&lt;/kbd&gt; set ic - do not take into account when searching whether the character is uppercase or lowercase.
If you don&amp;rsquo;t want to use an option, you must prefix the option name with no in the set command.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
